/*jslint node: true */
'use strict';
var sellerWorkflow={};
var sellerService=require('./seller_service');
var commonService=require('./../common/common_service');
var config = require('../../config/config');
var logger = config.logger;
var async = require('async');
var jwt = require('jsonwebtoken');
var failureResponse = {
	"responseCode": -1,
        "response": "",
        "errorMsg": ""
};

sellerWorkflow.uploadSellerProduct = function(apiname, lang, locale,request, responseCallback) {
	logger.info(request.userName + ":seller_workflow:uploadSellerProduct:" + apiname + ":Enter");
	var sucessResponse = {
                "responseCode": 0,
                "response": {},
                "errorMsg": ""
        };
        async.waterfall(
        [
		function(callback) {
			var fileName = "";
			fileName=request.marketPlace;
			if (request.productCategory != null && request.productCategory.length > 0 ) {
				fileName=fileName+"_"+request.productCategory+".properties";
			} else {
				fileName=fileName+".properties";
			}
			var fs = require('fs'),filename = "./properties/"+fileName;
			fs.stat(filename, function(err, stats) { 
				if(err || stats.isDirectory()){
					failureResponse.errorMsg="Properties File "+fileName+" Does Not Exist";
					callback(failureResponse,null);
				} else {
					callback(null,fileName);
				}
			});
		},
		function(fileName,callback) {
			var tableName = request.marketPlace;
			if (request.productCategory != null && request.productCategory.length > 0 ) {
                                tableName=tableName+"_"+request.productCategory+"_catalogue";
			} else {
                                tableName=tableName+"_catalogue";
                        }
			commonService.checkTableExist(apiname,request.userName,tableName,function(checkTableExistResponse) {
				if(checkTableExistResponse.responseCode === 0) {
					sucessResponse.errorMsg=fileName + " " + tableName;
					callback(null,fileName,tableName);
				} else {
					failureResponse.errorMsg="Database Table "+tableName+" Does Not Exist";
                                        callback(failureResponse,null);
				}
			});
		},
		function(fileName,tableName,callback) {
			var column_name="CREATE_TS,UPDATE_TS,STATUS,SELLER_NAME";
			var fs = require('fs'), readline = require('readline');
			var rd = readline.createInterface({
				input: fs.createReadStream("./properties/"+fileName),
				//output: process.stdout,
				console: false
			});
			rd.on('line', function(line) {
				var tmp = line.split('=');
				column_name=column_name+","+tmp[1];
			}).on('close', function() {
				callback(null,fileName,tableName,column_name);
			});
		},
		function(fileName,tableName,column_name,callback) {
			for(var i=0; i< request.productDetails.length; i++) {
				sellerService.insertProduct(apiname,request.userName,request,i,fileName,tableName,column_name,function(insertProductResponse) {
					if(insertProductResponse.responseCode === 0) {
						logger.info("Inserting the product is successfull");
					} else {
						logger.info("Inserting the product has failed");
					}
				});
			}
			sucessResponse.errorMsg="Upload is in progress!!";
			callback(null,sucessResponse);
		},
	],
        function(err, results) {
                if (err) {
                        logger.error(request.userName + ":seller_workflow:uploadSellerProduct:" + apiname + ":Exit",err);
                        responseCallback(err);
                } else {
                        logger.info(request.userName + ":seller_workflow:uploadSellerProduct:" + apiname + ":Exit",results);
                        responseCallback(results);
                }
        });
};

sellerWorkflow.uploadProduct = function(apiname, lang, locale,request, responseCallback) {
	logger.info(request.userName + ":seller_workflow:uploadProduct:" + apiname + ":Enter");
	async.waterfall(
	[
		function(callback) {
			sellerService.uploadProduct(apiname,request.userName,request.productDetails,function(uploadProductResponse) {
				if(uploadProductResponse.responseCode === 0) {
                                        callback(null,uploadProductResponse);
                                } else {
                                        failureResponse.errorMsg = "Failure in uploading product, Please try again or contact support team!!";
					callback(failureResponse,null);
				}
			});
		},
	],
	function(err, results) {
                if (err) {
                        logger.error(request.userName + ":seller_workflow:uploadProduct:" + apiname + ":Exit",err);
                        responseCallback(err);
                } else {
                        logger.info(request.userName + ":seller_workflow:uploadProduct:" + apiname + ":Exit",results);
                        responseCallback(results);
                }
        });
};

/*sellerWorkflow.getAllProducts = function(apiname, lang, locale,request, responseCallback) {
        logger.info(request.userName + ":seller_workflow:getAllProducts:" + apiname + ":Enter");
        async.waterfall(
        [
                function(callback) {
                        sellerService.getAllProducts(apiname,request.userName,function(getAllProductsResponse) {
                                if(getAllProductsResponse.responseCode === 0) {
                                        callback(null,getAllProductsResponse);
                                } else {
                                        failureResponse.errorMsg = "Issue in retriving the products, Please try again or contact support team!!";
                                        callback(failureResponse,null);
                                }
                        });
                },
        ],
        function(err, results) {
                if (err) {
                        logger.error(request.userName + ":seller_workflow:getAllProducts:" + apiname + ":Exit",err);
                        responseCallback(err);
                } else {
                        logger.info(request.userName + ":seller_workflow:getAllProducts:" + apiname + ":Exit",results);
                        responseCallback(results);
                }
        });
};*/
sellerWorkflow.getAllProducts = function(apiname, lang, locale,request, responseCallback) {
	logger.info(request.userName + ":seller_workflow:getAllProducts:" + apiname + ":Enter");
	var sucessResponse = {
                "responseCode": 0,
                "response": {
			"productDetails" : []
		},
                "errorMsg": ""
        };
	var productDetail = {};
	var fileList = {"fileList":[]};
        async.waterfall(
        [
                function(callback) {
			var fileName = "./properties/properties_list.properties";
			var fs = require('fs'), readline = require('readline');
			var rd = readline.createInterface({
				input: fs.createReadStream(fileName),
				console: false
			});
			rd.on('line', function(line) {
				var fileName1 = "./properties/"+line;
				fileList.fileList.push(fileName1);
			}).on('close', function() {
				callback(null,fileList);
			});
		},
		function(fileList,callback) {
			async.eachSeries(fileList.fileList,function(file,callback1){
				//logger.info("Add the unique key from file "+file+" into json productDetail");
				var fs = require('fs'), readline = require('readline');
				var rd = readline.createInterface({
					input: fs.createReadStream(file),
                                	console: false
                        	});
				rd.on('line', function(line) {
					var tmp = line.split('=');
					var json_key = tmp[0];
					if(! (productDetail.hasOwnProperty(json_key))) {
						productDetail[json_key] = "";
					}
				}).on('close', function() {
					callback1();
					//logger.info("Completed reading the file "+file+"");
				});
				if (file === "./properties/test.properties" ) {
					var id = "id";
					var status = "status";
					var sellerName = "sellerName";
					var marketPlace = "marketPlace";
					var productCategory = "productCategory";
					productDetail.id = "";
                                        productDetail.status = "";
                                        productDetail.sellerName = "";
					productDetail.marketPlace = "";
					productDetail.productCategory = "";
					callback(null,productDetail,fileList);
				}
			});
		},
		function(productDetail,fileList,callback) {
			async.eachSeries(fileList.fileList,function(file,callback1){
				var selectColumn = "select ID,STATUS,SELLER_NAME";
				var jsonKeyList = {"jsonKeyList" : []};
				var columnNameList = {"columnNameList" : []};
				var tableName = file;
				var marketPlace = "";
				var productCategory = "";
				tableName = tableName.replace(new RegExp("./properties/","g"), "");
				tableName = tableName.replace(new RegExp(".properties","g"), "");
				var tmp = tableName.split('_');
				marketPlace = tmp[0];
				if (tmp.length === 2 ) {
					productCategory = tmp[1];
				} else if (tmp.length === 3 ) {
					productCategory = tmp[1]+"_"+tmp[2];
				} else if (tmp.length === 4 ) {
                                        productCategory = tmp[1]+"_"+tmp[2]+"_"+tmp[3];
                                } else if (tmp.length === 5 ) {
                                        productCategory = tmp[1]+"_"+tmp[2]+"_"+tmp[3]+"_"+tmp[4];
                                } else if (tmp.length === 6 ) {
                                        productCategory = tmp[1]+"_"+tmp[2]+"_"+tmp[3]+"_"+tmp[4]+"_"+tmp[5];
                                } else if (tmp.length === 7 ) {
                                        productCategory = tmp[1]+"_"+tmp[2]+"_"+tmp[3]+"_"+tmp[4]+"_"+tmp[5]+"_"+tmp[6];
                                } else if (tmp.length === 8 ) {
                                        productCategory = tmp[1]+"_"+tmp[2]+"_"+tmp[3]+"_"+tmp[4]+"_"+tmp[5]+"_"+tmp[6]+"_"+tmp[7];
                                }
				tableName = tableName+"_catalogue";
				var fs = require('fs'), readline = require('readline');
				var rd = readline.createInterface({
					input: fs.createReadStream(file),
                                        console: false
                                });
                                rd.on('line', function(line) {
					var tmp1 = line.split('=');
					jsonKeyList.jsonKeyList.push(tmp1[0]);
					columnNameList.columnNameList.push(tmp1[1]);
					selectColumn = selectColumn+","+tmp1[1];
				}).on('close', function() {
					var user = request.userName;
					selectColumn = selectColumn+" from "+tableName+" where SELLER_NAME='"+request.userName+"'";
					sellerService.getAllProducts(apiname,request.userName,jsonKeyList.jsonKeyList,columnNameList.columnNameList,tableName,marketPlace,productCategory,productDetail,selectColumn,function(getAllProductsResponse){
						if(getAllProductsResponse.responseCode === 0) {
							for (var i=0;i < getAllProductsResponse.response.productDetails.length;i++) {
								sucessResponse.response.productDetails.push(getAllProductsResponse.response.productDetails[i]);
							}
						}
						callback1();
					});
				});
				if (file === "./properties/test.properties" ) {
					callback(null,sucessResponse);
				}
			});
		},
	],
        function(err, results) {
                if (err) {
                        logger.error(request.userName + ":seller_workflow:uploadSellerProduct:" + apiname + ":Exit",err);
                        responseCallback(err);
                } else {
                        logger.info(request.userName + ":seller_workflow:uploadSellerProduct:" + apiname + ":Exit",results);
                        responseCallback(results);
                }
        });
};

function sleep(millis) {
    return new Promise(resolve => setTimeout(resolve, millis));
}

module.exports = sellerWorkflow;
